package gui;

import context.ToolContext;
import util.KeyUtils;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.*;
import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.List;

/**
 * L·ªõp giao di·ªán ch√≠nh cho c√¥ng c·ª• qu·∫£n l√Ω ch·ªØ k√Ω s·ªë
 * Cung c·∫•p c√°c ch·ª©c nƒÉng t·∫°o kh√≥a, k√Ω v√† x√°c th·ª±c d·ªØ li·ªáu
 */
public class KeyManagementGUI extends JFrame {
    private JTextArea privateKeyTextArea;  // V√πng hi·ªÉn th·ªã kh√≥a ri√™ng t∆∞
    private JTextArea publicKeyTextArea;   // V√πng hi·ªÉn th·ªã kh√≥a c√¥ng khai
    private JTextArea dataTextArea;        // V√πng nh·∫≠p d·ªØ li·ªáu c·∫ßn k√Ω
    private JTextArea signatureTextArea;   // V√πng hi·ªÉn th·ªã ch·ªØ k√Ω s·ªë
    private JLabel statusLabel;            // Thanh tr·∫°ng th√°i
    private final ToolContext toolContext; // Context ch·ª©a c√°c c√¥ng c·ª• m√£ h√≥a

    /**
     * Constructor kh·ªüi t·∫°o giao di·ªán ch√≠nh
     */
    public KeyManagementGUI() {
        this.toolContext = ToolContext.getInstance();
        initializeFrame();
        createAndShowGUI();
    }

    /**
     * Kh·ªüi t·∫°o c·∫•u h√¨nh c∆° b·∫£n c·ªßa c·ª≠a s·ªï ch√≠nh
     */
    private void initializeFrame() {
        setTitle("C√¥ng C·ª• Ch·ªØ K√Ω S·ªë");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setPreferredSize(new Dimension(1400, 800));
        setMinimumSize(new Dimension(1000, 700));
    }

    /**
     * T·∫°o v√† hi·ªÉn th·ªã to√†n b·ªô giao di·ªán ng∆∞·ªùi d√πng
     */
    private void createAndShowGUI() {
        // Panel ch√≠nh v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i
        JPanel mainPanel = new JPanel(new BorderLayout(15, 15));
        mainPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        mainPanel.setBackground(new Color(248, 250, 252));

        // Panel ti√™u ƒë·ªÅ
        JPanel headerPanel = createHeaderPanel();
        mainPanel.add(headerPanel, BorderLayout.NORTH);

        // Panel n·ªôi dung v·ªõi c√°c tab
        JTabbedPane tabbedPane = createTabbedPane();
        mainPanel.add(tabbedPane, BorderLayout.CENTER);

        // Thanh tr·∫°ng th√°i
        statusLabel = new JLabel("S·∫µn s√†ng");
        statusLabel.setBorder(new EmptyBorder(10, 15, 10, 15));
        statusLabel.setOpaque(true);
        statusLabel.setBackground(new Color(241, 245, 249));
        statusLabel.setForeground(new Color(71, 85, 105));
        mainPanel.add(statusLabel, BorderLayout.SOUTH);

        add(mainPanel);
        pack();
        setLocationRelativeTo(null);
        setupDragAndDrop();
    }

    /**
     * T·∫°o panel ti√™u ƒë·ªÅ v·ªõi t√™n ·ª©ng d·ª•ng v√† m√¥ t·∫£
     */
    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(248, 250, 252));

        JLabel titleLabel = new JLabel("C√¥ng C·ª• Ch·ªØ K√Ω S·ªë");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));
        titleLabel.setForeground(new Color(30, 41, 59));

        JLabel subtitleLabel = new JLabel("T·∫°o kh√≥a, k√Ω d·ªØ li·ªáu v√† x√°c th·ª±c ch·ªØ k√Ω");
        subtitleLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        subtitleLabel.setForeground(new Color(100, 116, 139));

        JPanel titlePanel = new JPanel(new BorderLayout());
        titlePanel.setBackground(new Color(248, 250, 252));
        titlePanel.add(titleLabel, BorderLayout.CENTER);
        titlePanel.add(subtitleLabel, BorderLayout.SOUTH);

        headerPanel.add(titlePanel, BorderLayout.WEST);
        headerPanel.setBorder(new EmptyBorder(0, 0, 20, 0));

        return headerPanel;
    }

    /**
     * T·∫°o b·ªô tab ch·ª©a c√°c ch·ª©c nƒÉng ch√≠nh
     */
    private JTabbedPane createTabbedPane() {
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        tabbedPane.setBackground(Color.WHITE);

        // Tab qu·∫£n l√Ω kh√≥a
        JPanel keyManagementTab = createKeyManagementTab();
        tabbedPane.addTab("üîë Qu·∫£n L√Ω Kh√≥a", keyManagementTab);

        // Tab k√Ω v√† x√°c th·ª±c
        JPanel signVerifyTab = createSignVerifyTab();
        tabbedPane.addTab("‚úçÔ∏è K√Ω & X√°c Th·ª±c", signVerifyTab);

        return tabbedPane;
    }

    /**
     * T·∫°o tab qu·∫£n l√Ω kh√≥a v·ªõi c√°c ch·ª©c nƒÉng t·∫°o, load, save kh√≥a
     */
    private JPanel createKeyManagementTab() {
        JPanel mainPanel = new JPanel(new BorderLayout(20, 20));
        mainPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        mainPanel.setBackground(Color.WHITE);

        // Panel t·∫°o kh√≥a
        JPanel generatePanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        generatePanel.setBackground(Color.WHITE);

        JButton generateButton = createStyledButton("T·∫°o C·∫∑p Kh√≥a M·ªõi", new Color(59, 130, 246));
        generateButton.addActionListener(e -> generateKeyPair());
        generatePanel.add(generateButton);

        mainPanel.add(generatePanel, BorderLayout.NORTH);

        // Panel hi·ªÉn th·ªã kh√≥a
        JPanel keysPanel = new JPanel(new GridLayout(1, 2, 20, 0));
        keysPanel.setBackground(Color.WHITE);

        // Panel kh√≥a ri√™ng t∆∞
        JPanel privateKeyPanel = createKeyPanel("Kh√≥a Ri√™ng T∆∞", true);
        keysPanel.add(privateKeyPanel);

        // Panel kh√≥a c√¥ng khai
        JPanel publicKeyPanel = createKeyPanel("Kh√≥a C√¥ng Khai", false);
        keysPanel.add(publicKeyPanel);

        mainPanel.add(keysPanel, BorderLayout.CENTER);

        return mainPanel;
    }

    /**
     * T·∫°o panel cho t·ª´ng lo·∫°i kh√≥a (ri√™ng t∆∞ ho·∫∑c c√¥ng khai)
     * @param title Ti√™u ƒë·ªÅ c·ªßa panel
     * @param isPrivate true n·∫øu l√† kh√≥a ri√™ng t∆∞, false n·∫øu l√† kh√≥a c√¥ng khai
     */
    private JPanel createKeyPanel(String title, boolean isPrivate) {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(226, 232, 240), 1),
                title, TitledBorder.LEFT, TitledBorder.TOP,
                new Font("Segoe UI", Font.BOLD, 14), new Color(71, 85, 105)));
        panel.setBackground(Color.WHITE);

        // V√πng vƒÉn b·∫£n hi·ªÉn th·ªã kh√≥a
        JTextArea textArea = new JTextArea();
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.setFont(new Font("Consolas", Font.PLAIN, 12));
        textArea.setBorder(new EmptyBorder(10, 10, 10, 10));
        textArea.setBackground(new Color(248, 250, 252));

        if (isPrivate) {
            privateKeyTextArea = textArea;
        } else {
            publicKeyTextArea = textArea;
        }

        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(226, 232, 240)));
        panel.add(scrollPane, BorderLayout.CENTER);

        // Panel ch·ª©a c√°c n√∫t ch·ª©c nƒÉng
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
        buttonPanel.setBackground(Color.WHITE);

        JButton loadButton = createSmallButton("T·∫£i");
        JButton saveButton = createSmallButton("L∆∞u");
        JButton clearButton = createSmallButton("X√≥a");
        JButton copyButton = createSmallButton("Sao ch√©p");

        loadButton.addActionListener(e -> loadKeyFromFile(isPrivate));
        saveButton.addActionListener(e -> saveKeyToFile(isPrivate));
        clearButton.addActionListener(e -> clearKey(isPrivate));
        copyButton.addActionListener(e -> copyToClipboard(isPrivate ? privateKeyTextArea : publicKeyTextArea));

        buttonPanel.add(loadButton);
        buttonPanel.add(saveButton);
        buttonPanel.add(clearButton);
        buttonPanel.add(copyButton);

        panel.add(buttonPanel, BorderLayout.SOUTH);

        return panel;
    }

    /**
     * T·∫°o tab k√Ω v√† x√°c th·ª±c ch·ªØ k√Ω
     */
    private JPanel createSignVerifyTab() {
        JPanel mainPanel = new JPanel(new BorderLayout(20, 20));
        mainPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        mainPanel.setBackground(Color.WHITE);

        // Panel d·ªØ li·ªáu
        JPanel dataPanel = createDataPanel();

        // Panel ch·ªØ k√Ω
        JPanel signaturePanel = createSignaturePanel();

        // Chia ƒë√¥i m√†n h√¨nh
        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, dataPanel, signaturePanel);
        splitPane.setDividerSize(8);
        splitPane.setResizeWeight(0.5);
        splitPane.setBorder(null);

        mainPanel.add(splitPane, BorderLayout.CENTER);

        // Panel c√°c thao t√°c
        JPanel operationsPanel = createOperationsPanel();
        mainPanel.add(operationsPanel, BorderLayout.SOUTH);

        return mainPanel;
    }

    /**
     * T·∫°o panel nh·∫≠p d·ªØ li·ªáu c·∫ßn k√Ω ho·∫∑c x√°c th·ª±c
     */
    private JPanel createDataPanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(226, 232, 240), 1),
                "D·ªØ Li·ªáu C·∫ßn K√Ω/X√°c Th·ª±c", TitledBorder.LEFT, TitledBorder.TOP,
                new Font("Segoe UI", Font.BOLD, 14), new Color(71, 85, 105)));
        panel.setBackground(Color.WHITE);

        dataTextArea = new JTextArea();
        dataTextArea.setLineWrap(true);
        dataTextArea.setWrapStyleWord(true);
        dataTextArea.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        dataTextArea.setBorder(new EmptyBorder(10, 10, 10, 10));
        dataTextArea.setBackground(new Color(248, 250, 252));

        JScrollPane scrollPane = new JScrollPane(dataTextArea);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(226, 232, 240)));
        panel.add(scrollPane, BorderLayout.CENTER);

        // Panel ch·ª©a c√°c n√∫t ch·ª©c nƒÉng
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
        buttonPanel.setBackground(Color.WHITE);

        JButton loadDataButton = createSmallButton("T·∫£i D·ªØ Li·ªáu");
        JButton clearDataButton = createSmallButton("X√≥a");

        loadDataButton.addActionListener(e -> loadDataFromFile());
        clearDataButton.addActionListener(e -> dataTextArea.setText(""));

        buttonPanel.add(loadDataButton);
        buttonPanel.add(clearDataButton);

        panel.add(buttonPanel, BorderLayout.SOUTH);

        return panel;
    }

    /**
     * T·∫°o panel hi·ªÉn th·ªã ch·ªØ k√Ω s·ªë
     */
    private JPanel createSignaturePanel() {
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(new Color(226, 232, 240), 1),
                "Ch·ªØ K√Ω S·ªë", TitledBorder.LEFT, TitledBorder.TOP,
                new Font("Segoe UI", Font.BOLD, 14), new Color(71, 85, 105)));
        panel.setBackground(Color.WHITE);

        signatureTextArea = new JTextArea();
        signatureTextArea.setLineWrap(true);
        signatureTextArea.setWrapStyleWord(true);
        signatureTextArea.setFont(new Font("Consolas", Font.PLAIN, 12));
        signatureTextArea.setBorder(new EmptyBorder(10, 10, 10, 10));
        signatureTextArea.setBackground(new Color(248, 250, 252));

        JScrollPane scrollPane = new JScrollPane(signatureTextArea);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(226, 232, 240)));
        panel.add(scrollPane, BorderLayout.CENTER);

        // Panel ch·ª©a n√∫t x√≥a
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));
        buttonPanel.setBackground(Color.WHITE);

        JButton clearSignButton = createSmallButton("X√≥a");
        clearSignButton.addActionListener(e -> signatureTextArea.setText(""));
        buttonPanel.add(clearSignButton);

        panel.add(buttonPanel, BorderLayout.SOUTH);

        return panel;
    }

    /**
     * T·∫°o panel ch·ª©a c√°c n√∫t thao t√°c ch√≠nh (K√Ω, X√°c th·ª±c)
     */
    private JPanel createOperationsPanel() {
        JPanel panel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 15));
        panel.setBackground(Color.WHITE);
        panel.setBorder(new EmptyBorder(10, 0, 0, 0));

        JButton signButton = createStyledButton("K√Ω D·ªØ Li·ªáu", new Color(16, 185, 129));
        JButton verifyButton = createStyledButton("X√°c Th·ª±c Ch·ªØ K√Ω", new Color(139, 92, 246));

        signButton.addActionListener(e -> signData());
        verifyButton.addActionListener(e -> verifySignature());

        panel.add(signButton);
        panel.add(verifyButton);

        return panel;
    }

    /**
     * T·∫°o n√∫t c√≥ ki·ªÉu d√°ng ƒë·∫πp v·ªõi m√†u n·ªÅn t√πy ch·ªânh
     * @param text VƒÉn b·∫£n hi·ªÉn th·ªã tr√™n n√∫t
     * @param backgroundColor M√†u n·ªÅn c·ªßa n√∫t
     */
    private JButton createStyledButton(String text, Color backgroundColor) {
        JButton button = new JButton(text);
        button.setFont(new Font("Segoe UI", Font.BOLD, 14));
        button.setBackground(backgroundColor);
        button.setForeground(Color.WHITE);
        button.setBorder(BorderFactory.createEmptyBorder(12, 24, 12, 24));
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));

        // Hi·ªáu ·ª©ng hover
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(backgroundColor.darker());
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(backgroundColor);
            }
        });

        return button;
    }

    /**
     * T·∫°o n√∫t nh·ªè v·ªõi ki·ªÉu d√°ng nh·∫π nh√†ng
     * @param text VƒÉn b·∫£n hi·ªÉn th·ªã tr√™n n√∫t
     */
    private JButton createSmallButton(String text) {
        JButton button = new JButton(text);
        button.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        button.setBackground(new Color(241, 245, 249));
        button.setForeground(new Color(71, 85, 105));
        button.setBorder(BorderFactory.createEmptyBorder(8, 16, 8, 16));
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));

        // Hi·ªáu ·ª©ng hover
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(new Color(226, 232, 240));
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(new Color(241, 245, 249));
            }
        });

        return button;
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng b√°o tr·∫°ng th√°i
     * @param message Th√¥ng ƒëi·ªáp c·∫ßn hi·ªÉn th·ªã
     */
    private void updateStatus(String message) {
        statusLabel.setText(message);
    }

    /**
     * Hi·ªÉn th·ªã h·ªôp tho·∫°i l·ªói
     * @param title Ti√™u ƒë·ªÅ h·ªôp tho·∫°i
     * @param message N·ªôi dung th√¥ng b√°o l·ªói
     */
    private void showError(String title, String message) {
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
        updateStatus("L·ªói: " + message);
    }

    /**
     * Hi·ªÉn th·ªã h·ªôp tho·∫°i th√¥ng tin
     * @param title Ti√™u ƒë·ªÅ h·ªôp tho·∫°i
     * @param message N·ªôi dung th√¥ng b√°o
     */
    private void showInfo(String title, String message) {
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.INFORMATION_MESSAGE);
        updateStatus(message);
    }

    /**
     * X·ª≠ l√Ω t·∫°o c·∫∑p kh√≥a m·ªõi (kh√≥a ri√™ng t∆∞ v√† kh√≥a c√¥ng khai)
     */
    private void generateKeyPair() {
        try {
            toolContext.generateKeyPair();
            privateKeyTextArea.setText(KeyUtils.convertKeyToPEM(toolContext.getPrivateKey()));
            publicKeyTextArea.setText(KeyUtils.convertKeyToPEM(toolContext.getPublicKey()));
            updateStatus("ƒê√£ t·∫°o c·∫∑p kh√≥a m·ªõi th√†nh c√¥ng");
            showInfo("Th√†nh c√¥ng", "C·∫∑p kh√≥a m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng");
        } catch (Exception e) {
            showError("L·ªói T·∫°o Kh√≥a", e.getMessage());
        }
    }

    /**
     * T·∫£i kh√≥a t·ª´ file PEM
     * @param isPrivate true n·∫øu t·∫£i kh√≥a ri√™ng t∆∞, false n·∫øu t·∫£i kh√≥a c√¥ng khai
     */
    private void loadKeyFromFile(boolean isPrivate) {
        // T·∫°o ƒë·ªëi t∆∞·ª£ng ch·ªçn file
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("T·ªáp PEM", "pem"));

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fileChooser.getSelectedFile();
                String content = new String(Files.readAllBytes(file.toPath()));

                if (isPrivate) {
                    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng kh√≥a ri√™ng t∆∞
                    KeyUtils.readPrivateKeyFromString(content);
                    privateKeyTextArea.setText(content);
                    updateStatus("ƒê√£ t·∫£i kh√≥a ri√™ng t∆∞: " + file.getName());
                } else {
                    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng kh√≥a c√¥ng khai
                    KeyUtils.readPublicKeyFromString(content);
                    publicKeyTextArea.setText(content);
                    updateStatus("ƒê√£ t·∫£i kh√≥a c√¥ng khai: " + file.getName());
                }
            } catch (Exception e) {
                showError("L·ªói T·∫£i Kh√≥a", e.getMessage());
            }
        }
    }

    /**
     * L∆∞u kh√≥a v√†o file PEM
     * @param isPrivate true n·∫øu l∆∞u kh√≥a ri√™ng t∆∞, false n·∫øu l∆∞u kh√≥a c√¥ng khai
     */
    private void saveKeyToFile(boolean isPrivate) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("T·ªáp PEM", "pem"));

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            String content = isPrivate ? privateKeyTextArea.getText() : publicKeyTextArea.getText();
            if (content.isEmpty()) {
                showError("L·ªói", "Kh√¥ng c√≥ n·ªôi dung kh√≥a ƒë·ªÉ l∆∞u");
                return;
            }

            File file = fileChooser.getSelectedFile();
            String path = file.getPath();
            if (!path.toLowerCase().endsWith(".pem")) {
                path += ".pem";
            }

            try {
                try (FileWriter writer = new FileWriter(path)) {
                    writer.write(content);
                }
                showInfo("Th√†nh c√¥ng", "Kh√≥a ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng v√†o " + path);
            } catch (Exception e) {
                showError("L·ªói L∆∞u Kh√≥a", e.getMessage());
            }
        }
    }

    /**
     * T·∫£i d·ªØ li·ªáu t·ª´ file ƒë·ªÉ k√Ω ho·∫∑c x√°c th·ª±c
     */
    private void loadDataFromFile() {
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fileChooser.getSelectedFile();
                String content = new String(Files.readAllBytes(file.toPath()));
                dataTextArea.setText(content);
                updateStatus("ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´: " + file.getName());
            } catch (Exception e) {
                showError("L·ªói T·∫£i D·ªØ Li·ªáu", e.getMessage());
            }
        }
    }

    /**
     * K√Ω d·ªØ li·ªáu b·∫±ng kh√≥a ri√™ng t∆∞
     */
    private void signData() {
        try {
            String data = dataTextArea.getText();
            if (data.isEmpty()) {
                showError("L·ªói", "Vui l√≤ng nh·∫≠p d·ªØ li·ªáu c·∫ßn k√Ω");
                return;
            }

            PrivateKey privateKey = KeyUtils.readPrivateKeyFromString(privateKeyTextArea.getText());
            toolContext.setPrivateKey(privateKey);

            String signature = toolContext.sign(data);
            signatureTextArea.setText(signature);
            showInfo("Th√†nh c√¥ng", "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c k√Ω th√†nh c√¥ng");
        } catch (Exception e) {
            showError("L·ªói K√Ω D·ªØ Li·ªáu", e.getMessage());
        }
    }

    /**
     * X√°c th·ª±c ch·ªØ k√Ω b·∫±ng kh√≥a c√¥ng khai
     */
    private void verifySignature() {
        try {
            String data = dataTextArea.getText();
            String signature = signatureTextArea.getText();

            if (data.isEmpty() || signature.isEmpty()) {
                showError("L·ªói", "C·∫ßn c√≥ c·∫£ d·ªØ li·ªáu v√† ch·ªØ k√Ω ƒë·ªÉ x√°c th·ª±c");
                return;
            }

            PublicKey publicKey = KeyUtils.readPublicKeyFromString(publicKeyTextArea.getText());
            toolContext.setPublicKey(publicKey);

            boolean isValid = toolContext.verify(data, signature);
            showInfo("K·∫øt Qu·∫£ X√°c Th·ª±c",
                    isValid ? "Ch·ªØ k√Ω h·ª£p l·ªá ‚úì" : "Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá ‚úó");
        } catch (Exception e) {
            showError("L·ªói X√°c Th·ª±c", e.getMessage());
        }
    }

    /**
     * X√≥a n·ªôi dung kh√≥a
     * @param isPrivate true n·∫øu x√≥a kh√≥a ri√™ng t∆∞, false n·∫øu x√≥a kh√≥a c√¥ng khai
     */
    private void clearKey(boolean isPrivate) {
        if (isPrivate) {
            privateKeyTextArea.setText("");
            updateStatus("ƒê√£ x√≥a kh√≥a ri√™ng t∆∞");
        } else {
            publicKeyTextArea.setText("");
            updateStatus("ƒê√£ x√≥a kh√≥a c√¥ng khai");
        }
    }

    /**
     * Sao ch√©p n·ªôi dung v√†o clipboard
     * @param textArea V√πng vƒÉn b·∫£n c·∫ßn sao ch√©p
     */
    private void copyToClipboard(JTextArea textArea) {
        textArea.selectAll();
        textArea.copy();
        textArea.select(0, 0);
        updateStatus("ƒê√£ sao ch√©p n·ªôi dung v√†o clipboard");
    }

    /**
     * Thi·∫øt l·∫≠p ch·ª©c nƒÉng k√©o th·∫£ file
     */
    private void setupDragAndDrop() {
        new DropTarget(privateKeyTextArea, new KeyDropTargetListener(true));
        new DropTarget(publicKeyTextArea, new KeyDropTargetListener(false));
        new DropTarget(dataTextArea, new DropTargetAdapter() {
            public void drop(DropTargetDropEvent event) {
                try {
                    event.acceptDrop(DnDConstants.ACTION_COPY);
                    List<File> files = (List<File>) event.getTransferable()
                            .getTransferData(DataFlavor.javaFileListFlavor);
                    if (!files.isEmpty()) {
                        String content = new String(Files.readAllBytes(files.get(0).toPath()));
                        dataTextArea.setText(content);
                        updateStatus("ƒê√£ t·∫£i d·ªØ li·ªáu b·∫±ng k√©o th·∫£");
                    }
                } catch (Exception e) {
                    showError("L·ªói K√©o Th·∫£", e.getMessage());
                }
            }
        });
    }

    /**
     * L·ªõp x·ª≠ l√Ω s·ª± ki·ªán k√©o th·∫£ cho kh√≥a
     */
    private class KeyDropTargetListener implements DropTargetListener {
        private final boolean isPrivate;

        /**
         * Constructor
         * @param isPrivate true n·∫øu x·ª≠ l√Ω kh√≥a ri√™ng t∆∞, false n·∫øu x·ª≠ l√Ω kh√≥a c√¥ng khai
         */
        public KeyDropTargetListener(boolean isPrivate) {
            this.isPrivate = isPrivate;
        }

        @Override
        public void drop(DropTargetDropEvent event) {
            try {
                event.acceptDrop(DnDConstants.ACTION_COPY);
                List<File> files = (List<File>) event.getTransferable()
                        .getTransferData(DataFlavor.javaFileListFlavor);
                if (!files.isEmpty()) {
                    String content = new String(Files.readAllBytes(files.get(0).toPath()));
                    if (isPrivate) {
                        KeyUtils.readPrivateKeyFromString(content); // Ki·ªÉm tra t√≠nh h·ª£p l·ªá
                        privateKeyTextArea.setText(content);
                        updateStatus("ƒê√£ t·∫£i kh√≥a ri√™ng t∆∞: " + files.get(0).getName());
                    } else {
                        KeyUtils.readPublicKeyFromString(content); // Ki·ªÉm tra t√≠nh h·ª£p l·ªá
                        publicKeyTextArea.setText(content);
                        updateStatus("ƒê√£ t·∫£i kh√≥a c√¥ng khai: " + files.get(0).getName());
                    }
                }
            } catch (Exception e) {
                showError("L·ªói K√©o Th·∫£", e.getMessage());
            }
            event.dropComplete(true);
        }

        @Override
        public void dragEnter(DropTargetDragEvent event) {
            // Kh√¥ng c·∫ßn x·ª≠ l√Ω
        }

        @Override
        public void dragOver(DropTargetDragEvent event) {
            // Kh√¥ng c·∫ßn x·ª≠ l√Ω
        }

        @Override
        public void dropActionChanged(DropTargetDragEvent event) {
            // Kh√¥ng c·∫ßn x·ª≠ l√Ω
        }

        @Override
        public void dragExit(DropTargetEvent event) {
            // Kh√¥ng c·∫ßn x·ª≠ l√Ω
        }
    }
}