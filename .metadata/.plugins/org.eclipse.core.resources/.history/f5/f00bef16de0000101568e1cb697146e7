package controllers;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Random;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import dto.AccountDTO;
import mail.EmailUtil;
import models.Account;
import services.AccountService;

public class AccountController extends HttpServlet {
    private AccountService accountService = new AccountService();

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = req.getParameter("action");
        if ("register".equals(action)) {
            register(req, resp);
        } else if ("login".equals(action)) {
            login(req, resp);
        } else if ("updateProfile".equals(action)) {
            updateProfile(req, resp);
        } else if ("changePassword".equals(action)) {
            changePassword(req, resp);
        }else if ("forgotPassword".equals(action)) {  
            forgotPassword(req, resp);
        }
    }

    private void register(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String username = req.getParameter("username");
        String password = req.getParameter("password");
        String email = req.getParameter("email");

        boolean success = accountService.register(username, password, email);
        if (success) {
            resp.sendRedirect("login.jsp?success=registered");
        } else {
            req.setAttribute("error", "Tên tài khoản đã tồn tại.");
            req.getRequestDispatcher("register.jsp").forward(req, resp);
        }
    }

    private void login(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String username = req.getParameter("username");
        String password = req.getParameter("password");

        Account account = accountService.login(username, password);
        if (account != null) {
            AccountDTO accountDTO = new AccountDTO(account.getAccountId(), account.getUsername(), account.getEmail());
            HttpSession session = req.getSession();
            session.setAttribute("user", accountDTO);
            resp.sendRedirect("home.jsp");
        } else {
            req.setAttribute("error", "Sai tài khoản hoặc mật khẩu.");
            req.getRequestDispatcher("login.jsp").forward(req, resp);
        }
    }

    private void updateProfile(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        HttpSession session = request.getSession();
        AccountDTO user = (AccountDTO) session.getAttribute("user");

        if (user != null) {
            String newUsername = request.getParameter("username");
            String newEmail = request.getParameter("email");

            // Kiểm tra nếu dữ liệu không thay đổi thì không làm gì cả
            if (newUsername.equals(user.getUsername()) && newEmail.equals(user.getEmail())) {
                request.setAttribute("message", "Không có thay đổi nào để cập nhật.");
                request.getRequestDispatcher("profile.jsp").forward(request, response);
                return;
            }

            // Cập nhật thông tin nếu có thay đổi
            user.setUsername(newUsername);
            user.setEmail(newEmail);

            boolean updated = accountService.updateProfile(user);
            if (updated) {
                session.setAttribute("user", user);
                request.setAttribute("message", "Cập nhật thông tin thành công!");
            } else {
                request.setAttribute("error", "Lỗi cập nhật thông tin.");
            }
            request.getRequestDispatcher("profile.jsp").forward(request, response);
        }
    }

    private void changePassword(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        HttpSession session = request.getSession();
        AccountDTO user = (AccountDTO) session.getAttribute("user");

        if (user != null) {
            String oldPassword = request.getParameter("oldPassword");
            String newPassword = request.getParameter("newPassword");

            // Kiểm tra mật khẩu cũ có đúng không
            if (!accountService.checkPassword(user.getAccountId(), oldPassword)) {
                request.setAttribute("error", "Mật khẩu cũ không đúng!");
                request.getRequestDispatcher("profile.jsp").forward(request, response);
                return;
            }

            // Kiểm tra nếu mật khẩu mới giống mật khẩu cũ
            if (oldPassword.equals(newPassword)) {
                request.setAttribute("error", "Mật khẩu mới không được giống mật khẩu cũ.");
                request.getRequestDispatcher("profile.jsp").forward(request, response);
                return;
            }

            // Cập nhật mật khẩu
            boolean updated = accountService.updatePassword(user.getAccountId(), newPassword);
            if (updated) {
                request.setAttribute("message", "Mật khẩu đã được cập nhật thành công.");
            } else {
                request.setAttribute("error", "Lỗi khi cập nhật mật khẩu.");
            }
            request.getRequestDispatcher("profile.jsp").forward(request, response);
        }
    }
    private void forgotPassword(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String email = req.getParameter("email");
        resp.setContentType("text/plain");
        resp.setCharacterEncoding("UTF-8");
        PrintWriter out = resp.getWriter();

        Account account = accountService.getAccountByEmail(email);
        
        if (account != null) {
            String newPassword = generateRandomPassword();
            boolean updated = accountService.updatePassword(account.getAccountId(), newPassword);
            
            if (updated) {
                boolean emailSent = EmailUtil.sendEmail(email, "Khôi phục mật khẩu", "Mật khẩu mới: " + newPassword);
                if (emailSent) {
                    out.write("success");
                } else {
                    out.write("email_error");
                }
            } else {
                out.write("update_error");
            }
        } else {
            out.write("email_not_found");
        }
        out.flush(); // Đảm bảo response được gửi về client
        out.close(); 
    }


    // Hàm tạo mật khẩu ngẫu nhiên
    private String generateRandomPassword() {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder password = new StringBuilder();
        Random random = new Random();
        for (int i = 0; i < 8; i++) {
            password.append(characters.charAt(random.nextInt(characters.length())));
        }
        return password.toString();
    }



    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = req.getParameter("action");
        if ("logout".equals(action)) {
            logout(req, resp);
        }
    }

    private void logout(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        HttpSession session = req.getSession();
        session.invalidate();
        resp.sendRedirect("login.jsp");
    }
}
