package controllers;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Random;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import dto.AccountDTO;
import mail.EmailUtil;
import models.Account;
import services.AccountService;

public class AccountController extends HttpServlet {
    private AccountService accountService = new AccountService();

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = null;
        
        if (ServletFileUpload.isMultipartContent(req)) {
            try {
                List<FileItem> items = new ServletFileUpload(new DiskFileItemFactory()).parseRequest(req);
                for (FileItem item : items) {
                    if (item.isFormField() && "action".equals(item.getFieldName())) {
                        action = item.getString("UTF-8");
                        break;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            action = req.getParameter("action"); // N·∫øu kh√¥ng ph·∫£i multipart
        }

        System.out.println("üîç Received POST request: action = " + action);

        if (action == null) {
            System.out.println("‚ö†Ô∏è action b·ªã null!");
            resp.getWriter().write("invalid_action");
            return;
        }

        switch (action) {
            case "register": register(req, resp); break;
            case "login": login(req, resp); break;
            case "updateProfile": updateProfile(req, resp); break;
            case "changePassword": changePassword(req, resp); break;
            case "forgotPassword": forgotPassword(req, resp); break;
            default:
                System.out.println("‚ùå Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c action: " + action);
                resp.getWriter().write("invalid_action");
        }
    }

    private void register(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String username = req.getParameter("username");
        String password = req.getParameter("password");
        String email = req.getParameter("email");

        boolean success = accountService.register(username, password, email);
        if (success) {
            resp.sendRedirect("login.jsp?success=registered");
        } else {
            req.setAttribute("error", "T√™n t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i.");
            req.getRequestDispatcher("register.jsp").forward(req, resp);
        }
    }

    private void login(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String username = req.getParameter("username");
        String password = req.getParameter("password");

        Account account = accountService.login(username, password);
        if (account != null) {
            AccountDTO accountDTO = new AccountDTO(account.getAccountId(), account.getUsername(), account.getEmail());
            HttpSession session = req.getSession();
            session.setAttribute("user", accountDTO);
            resp.sendRedirect("home.jsp");
        } else {
            req.setAttribute("error", "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u.");
            req.getRequestDispatcher("login.jsp").forward(req, resp);
        }
    }

    private void updateProfile(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        HttpSession session = request.getSession();
        AccountDTO user = (AccountDTO) session.getAttribute("user");

        if (user != null) {
            String newUsername = request.getParameter("username");
            String newEmail = request.getParameter("email");

            // Ki·ªÉm tra n·∫øu d·ªØ li·ªáu kh√¥ng thay ƒë·ªïi th√¨ kh√¥ng l√†m g√¨ c·∫£
            if (newUsername.equals(user.getUsername()) && newEmail.equals(user.getEmail())) {
                request.setAttribute("message", "Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë·ªÉ c·∫≠p nh·∫≠t.");
                request.getRequestDispatcher("profile.jsp").forward(request, response);
                return;
            }

            // C·∫≠p nh·∫≠t th√¥ng tin n·∫øu c√≥ thay ƒë·ªïi
            user.setUsername(newUsername);
            user.setEmail(newEmail);

            boolean updated = accountService.updateProfile(user);
            if (updated) {
                session.setAttribute("user", user);
                request.setAttribute("message", "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
            } else {
                request.setAttribute("error", "L·ªói c·∫≠p nh·∫≠t th√¥ng tin.");
            }
            request.getRequestDispatcher("profile.jsp").forward(request, response);
        }
    }

    private void changePassword(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        HttpSession session = request.getSession();
        AccountDTO user = (AccountDTO) session.getAttribute("user");

        if (user != null) {
            String oldPassword = request.getParameter("oldPassword");
            String newPassword = request.getParameter("newPassword");

            // Ki·ªÉm tra m·∫≠t kh·∫©u c≈© c√≥ ƒë√∫ng kh√¥ng
            if (!accountService.checkPassword(user.getAccountId(), oldPassword)) {
                request.setAttribute("error", "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!");
                request.getRequestDispatcher("profile.jsp").forward(request, response);
                return;
            }

            // Ki·ªÉm tra n·∫øu m·∫≠t kh·∫©u m·ªõi gi·ªëng m·∫≠t kh·∫©u c≈©
            if (oldPassword.equals(newPassword)) {
                request.setAttribute("error", "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c gi·ªëng m·∫≠t kh·∫©u c≈©.");
                request.getRequestDispatcher("profile.jsp").forward(request, response);
                return;
            }

            // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
            boolean updated = accountService.updatePassword(user.getAccountId(), newPassword);
            if (updated) {
                request.setAttribute("message", "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.");
            } else {
                request.setAttribute("error", "L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u.");
            }
            request.getRequestDispatcher("profile.jsp").forward(request, response);
        }
    }
    private void forgotPassword(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String email = req.getParameter("email");
        resp.setContentType("text/plain");
        resp.setCharacterEncoding("UTF-8");
        PrintWriter out = resp.getWriter();

        // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng
        Account account = accountService.getAccountByEmail(email);
        
        if (account == null) {
            System.out.println("Email kh√¥ng t·ªìn t·∫°i: " + email);
            out.write("email_not_found");
            out.flush();
            return;
        }

        System.out.println("Email t·ªìn t·∫°i: " + email);

        // T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n m·ªõi
        String newPassword = generateRandomPassword();
        
        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u v√†o database
        boolean updated = accountService.updatePassword(account.getAccountId(), newPassword);
        
        if (!updated) {
            System.out.println("L·ªói c·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho accountId: " + account.getAccountId());
            out.write("update_error");
            out.flush();
            return;
        }

        System.out.println("M·∫≠t kh·∫©u c·∫≠p nh·∫≠t th√†nh c√¥ng.");

        // G·ª≠i email kh√¥i ph·ª•c m·∫≠t kh·∫©u
        boolean emailSent = EmailUtil.sendEmail(email, "Kh√¥i ph·ª•c m·∫≠t kh·∫©u", "M·∫≠t kh·∫©u m·ªõi: " + newPassword);
        
        if (emailSent) {
            out.write("success");
        } else {
            System.out.println("L·ªói g·ª≠i email.");
            out.write("email_error");
        }

        out.flush(); // ƒê·∫£m b·∫£o response ƒë∆∞·ª£c g·ª≠i v·ªÅ client
    }



    // H√†m t·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
    private String generateRandomPassword() {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder password = new StringBuilder();
        Random random = new Random();
        for (int i = 0; i < 8; i++) {
            password.append(characters.charAt(random.nextInt(characters.length())));
        }
        return password.toString();
    }



    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = req.getParameter("action");
        if ("logout".equals(action)) {
            logout(req, resp);
        }
    }

    private void logout(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        HttpSession session = req.getSession();
        session.invalidate();
        resp.sendRedirect("login.jsp");
    }
}
