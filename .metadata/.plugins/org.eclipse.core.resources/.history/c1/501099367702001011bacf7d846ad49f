package controllers;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.Map;

import dto.ProductDTO;
import models.Product;
import services.ProductService;

public class ProductController extends HttpServlet {
    private ProductService productService = new ProductService();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = req.getParameter("action");
        if ("list".equals(action)) {
            listProducts(req, resp);
        } else if ("details".equals(action)) {
        	listProductDetails(req, resp);
        } else if ("shop".equals(action)) {
        	listProducts(req, resp);
        } else {
        	listProducts(req, resp);
        }
    }

    private void listProducts(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        List<ProductDTO> products = productService.getAll().stream()
            .map(this::mapToDTO)
            .collect(Collectors.toList());

        req.setAttribute("products", products);
        req.getRequestDispatcher("shop.jsp").forward(req, resp);
    }
    
    private void listProductDetails(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        Long productId = Long.parseLong(req.getParameter("id"));
        Product product = productService.getById(productId);
        
        if (product != null) {
            req.setAttribute("product", mapToDTO(product));
            req.getRequestDispatcher("productDetails.jsp").forward(req, resp);
        } else {
            resp.sendRedirect("shop.jsp?error=notfound");
        }
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = req.getParameter("action");
        if ("add".equals(action)) {
            addProduct(req, resp);
        } else if ("delete".equals(action)) {
            deleteProduct(req, resp);
        } else if ("update".equals(action)) {
            updateProduct(req, resp);
        } else if ("addToCart".equals(action)) {
            addToCart(req, resp);
        }
    }

    private void addProduct(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        ProductDTO productDTO = extractProductDTO(req);
        Product product = mapToEntity(productDTO);
        productService.insert(product);
        resp.sendRedirect("ProductController?action=list");
    }

    private void deleteProduct(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        Long productId = Long.parseLong(req.getParameter("id"));
        productService.delete(productId);
        resp.sendRedirect("ProductController?action=list");
    }

    private void updateProduct(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        ProductDTO productDTO = extractProductDTO(req);
        Product product = mapToEntity(productDTO);
        productService.update(product);
        resp.sendRedirect("ProductController?action=list");
    }

    @SuppressWarnings("unchecked")
    private void addToCart(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        HttpSession session = req.getSession();
        Map<Long, Integer> cart = (Map<Long, Integer>) session.getAttribute("cart");
        
        if (cart == null) {
            cart = new HashMap<>();
            session.setAttribute("cart", cart);
        }
        
        Long productId = Long.parseLong(req.getParameter("productId"));
        
        // Add to cart or increase quantity if already in cart
        cart.put(productId, cart.getOrDefault(productId, 0) + 1);
        
        // Redirect back to shop page
        String referer = req.getHeader("Referer");
        if (referer != null) {
            resp.sendRedirect(referer);
        } else {
            resp.sendRedirect("ProductController?action=shop");
        }
    }

    private ProductDTO extractProductDTO(HttpServletRequest req) {
        ProductDTO productDTO = new ProductDTO();
        String idParam = req.getParameter("id");
        if (idParam != null && !idParam.isEmpty()) {
            productDTO.setProductId(Long.parseLong(idParam));
        }
        productDTO.setCategoryId(Long.parseLong(req.getParameter("categoryId")));
        productDTO.setName(req.getParameter("name"));
        productDTO.setPrice(Double.parseDouble(req.getParameter("price")));
        productDTO.setDescription(req.getParameter("description"));
        productDTO.setImage(req.getParameter("image"));
        productDTO.setHaveTrending(req.getParameter("haveTrending") != null);
        return productDTO;
    }

    private ProductDTO mapToDTO(Product product) {
        ProductDTO dto = new ProductDTO(
            product.getProductId(),
            product.getCategoryId(),
            product.getName(),
            product.getPrice(),
            product.getDescription(),
            product.getImage(),
            product.isHaveTrending()
        );
        return dto;
    }

    private Product mapToEntity(ProductDTO productDTO) {
        Product product = new Product();
        
        // For updates, retrieve the existing product first to preserve stock information
        if (productDTO.getProductId() != 0) {
            product = productService.getById(productDTO.getProductId());
            if (product == null) {
                product = new Product();
                product.setStock(0); // Default value for new product
            }
        } else {
            product.setStock(0); // Default value for new product
        }
        
        product.setProductId(productDTO.getProductId());
        product.setCategoryId(productDTO.getCategoryId());
        product.setName(productDTO.getName());
        product.setPrice(productDTO.getPrice());
        product.setDescription(productDTO.getDescription());
        product.setImage(productDTO.getImage());
        product.setHaveTrending(productDTO.isHaveTrending());
        
        return product;
    }
}