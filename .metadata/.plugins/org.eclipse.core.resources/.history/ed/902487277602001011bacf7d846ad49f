package controllers;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.util.HashMap;
import java.util.Map;

import dto.ProductDTO;
import models.Product;
import services.ProductService;

public class ProductController extends HttpServlet {
    private ProductService productService = new ProductService();

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = req.getParameter("action");
        if ("details".equals(action)) {
            showProductDetails(req, resp);
        } else {
            // Default action is to show shop
            showShop(req, resp);
        }
    }

    private void showShop(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        List<ProductDTO> products = productService.getAll().stream()
            .map(this::mapToDTO)
            .collect(Collectors.toList());

        req.setAttribute("products", products);
        req.getRequestDispatcher("shop.jsp").forward(req, resp);
    }

    private void showProductDetails(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        Long productId = Long.parseLong(req.getParameter("id"));
        Product product = productService.getById(productId);
        
        if (product != null) {
            req.setAttribute("product", mapToDTO(product));
            req.getRequestDispatcher("productDetails.jsp").forward(req, resp);
        } else {
            resp.sendRedirect("shop.jsp?error=notfound");
        }
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String action = req.getParameter("action");
        if ("addToCart".equals(action)) {
            addToCart(req, resp);
        }
    }

    @SuppressWarnings("unchecked")
    private void addToCart(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        HttpSession session = req.getSession();
        Map<Long, Integer> cart = (Map<Long, Integer>) session.getAttribute("cart");
        
        if (cart == null) {
            cart = new HashMap<>();
            session.setAttribute("cart", cart);
        }
        
        Long productId = Long.parseLong(req.getParameter("productId"));
        Product product = productService.getById(productId);
        
        if (product != null) {
            // Add to cart or increase quantity if already in cart
            cart.put(productId, cart.getOrDefault(productId, 0) + 1);
            
            // Set success message in session
            session.setAttribute("cartMessage", "Product '" + product.getName() + "' added to cart successfully!");
        } else {
            // Set error message in session
            session.setAttribute("cartMessage", "Product not found!");
        }
        
        // Redirect back to shop page
        String referer = req.getHeader("Referer");
        if (referer != null) {
            resp.sendRedirect(referer);
        } else {
            resp.sendRedirect("ProductController?action=shop");
        }
    }

    private ProductDTO mapToDTO(Product product) {
        ProductDTO dto = new ProductDTO(
            product.getProductId(),
            product.getCategoryId(),
            product.getName(),
            product.getPrice(),
            product.getDescription(),
            product.getImage(),
            product.isHaveTrending()
        );
        return dto;
    }
}