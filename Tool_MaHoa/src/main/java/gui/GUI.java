package gui;

import context.KeySize;
import context.SignatureAlgorithm;
import context.ToolContext;
import gui.helper.FileHandler;
import gui.helper.UIComponents;
import util.KeyUtils;

import javax.swing.*;
import java.awt.*;
import java.security.PrivateKey;
import java.security.PublicKey;

/**
 * L·ªõp giao di·ªán ch√≠nh cho c√¥ng c·ª• qu·∫£n l√Ω ch·ªØ k√Ω s·ªë
 * Cung c·∫•p c√°c ch·ª©c nƒÉng t·∫°o kh√≥a, k√Ω v√† x√°c th·ª±c d·ªØ li·ªáu
 */
public class GUI extends JFrame {
    private JTextArea privateKeyTextArea;  // V√πng hi·ªÉn th·ªã kh√≥a ri√™ng t∆∞
    private JTextArea publicKeyTextArea;   // V√πng hi·ªÉn th·ªã kh√≥a c√¥ng khai
    private JTextArea dataTextArea;        // V√πng nh·∫≠p d·ªØ li·ªáu c·∫ßn k√Ω
    private JTextArea signatureTextArea;   // V√πng hi·ªÉn th·ªã ch·ªØ k√Ω s·ªë
    private JLabel statusLabel;            // Thanh tr·∫°ng th√°i
    private final ToolContext toolContext; // Context ch·ª©a c√°c c√¥ng c·ª• m√£ h√≥a

    /**
     * Constructor kh·ªüi t·∫°o giao di·ªán ch√≠nh
     */
    public GUI() {
        this.toolContext = ToolContext.getInstance();
        initializeFrame();
        createAndShowGUI();
    }

    /**
     * Kh·ªüi t·∫°o c·∫•u h√¨nh c∆° b·∫£n c·ªßa c·ª≠a s·ªï ch√≠nh
     */
    private void initializeFrame() {
        setTitle("C√¥ng C·ª• Ch·ªØ K√Ω S·ªë");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setPreferredSize(new Dimension(1400, 800));
        setMinimumSize(new Dimension(1000, 700));
    }

    /**
     * T·∫°o v√† hi·ªÉn th·ªã to√†n b·ªô giao di·ªán ng∆∞·ªùi d√πng
     */
    private void createAndShowGUI() {
        JPanel mainPanel = new JPanel(new BorderLayout(15, 15));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        mainPanel.setBackground(new Color(248, 250, 252));

        // Header
        JPanel headerPanel = UIComponents.createHeaderPanel(
                "C√¥ng C·ª• Ch·ªØ K√Ω S·ªë",
                "T·∫°o kh√≥a, k√Ω d·ªØ li·ªáu v√† x√°c th·ª±c ch·ªØ k√Ω"
        );
        mainPanel.add(headerPanel, BorderLayout.NORTH);

        // Tabs
        JTabbedPane tabbedPane = createTabbedPane();
        mainPanel.add(tabbedPane, BorderLayout.CENTER);

        // Status
        statusLabel = UIComponents.createStatusLabel("S·∫µn s√†ng");
        mainPanel.add(statusLabel, BorderLayout.SOUTH);

        add(mainPanel);
        pack();
        setLocationRelativeTo(null);
        setupDragAndDrop();
    }

    /**
     * T·∫°o b·ªô tab ch·ª©a c√°c ch·ª©c nƒÉng ch√≠nh
     */
    private JTabbedPane createTabbedPane() {
        JTabbedPane tabbedPane = UIComponents.createStyledTabbedPane();

        JPanel keyManagementTab = createKeyManagementTab();
        tabbedPane.addTab("üîë Qu·∫£n L√Ω Kh√≥a", keyManagementTab);

        JPanel signVerifyTab = createSignVerifyTab();
        tabbedPane.addTab("‚úçÔ∏è K√Ω & X√°c Th·ª±c", signVerifyTab);

        return tabbedPane;
    }

    /**
     * T·∫°o tab qu·∫£n l√Ω kh√≥a
     */
    private JPanel createKeyManagementTab() {
        JPanel mainPanel = createStyledPanel(new BorderLayout(20, 20));

        JPanel generatePanel = createGeneratePanel();
        mainPanel.add(generatePanel, BorderLayout.NORTH);

        JPanel keysPanel = new JPanel(new GridLayout(1, 2, 20, 0));
        keysPanel.setBackground(Color.WHITE);
        keysPanel.add(createKeyPanel("Kh√≥a Ri√™ng T∆∞", true, privateKeyTextArea));
        keysPanel.add(createKeyPanel("Kh√≥a C√¥ng Khai", false, publicKeyTextArea));
        mainPanel.add(keysPanel, BorderLayout.CENTER);

        return mainPanel;
    }

    /**
     * T·∫°o panel cho n√∫t t·∫°o c·∫∑p kh√≥a v√† c√°c combobox
     */
    private JPanel createGeneratePanel() {
        JPanel generatePanel = createStyledPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));

        // T·∫°o combobox cho key sizes
        JComboBox<KeySize> keySizeCombo = new JComboBox<>(KeySize.values());
        keySizeCombo.setSelectedItem(KeySize.SIZE_2048);
        generatePanel.add(UIComponents.createLabeledComboBox("Keysize:", keySizeCombo, 100));

        // T·∫°o combobox cho signature algorithms
        JComboBox<SignatureAlgorithm> signatureAlgCombo = new JComboBox<>(SignatureAlgorithm.values());
        signatureAlgCombo.setSelectedItem(SignatureAlgorithm.SHA256_WITH_RSA);
        generatePanel.add(UIComponents.createLabeledComboBox("Thu·∫≠t to√°n k√Ω:", signatureAlgCombo, 180));

        // N√∫t t·∫°o kh√≥a
        JButton generateButton = UIComponents.createStyledButton("T·∫°o C·∫∑p Kh√≥a M·ªõi", new Color(59, 130, 246));
        generateButton.addActionListener(e -> {
            KeySize selectedKeySize = (KeySize) keySizeCombo.getSelectedItem();
            SignatureAlgorithm selectedSignatureAlg = (SignatureAlgorithm) signatureAlgCombo.getSelectedItem();
            toolContext.setKeySize(selectedKeySize);
            toolContext.setSignatureAlgorithm(selectedSignatureAlg);
            try {
                toolContext.generateKeyPair();
                privateKeyTextArea.setText(KeyUtils.convertKeyToPEM(toolContext.getPrivateKey()));
                publicKeyTextArea.setText(KeyUtils.convertKeyToPEM(toolContext.getPublicKey()));
                showInfo("Th√†nh c√¥ng", "T·∫°o kh√≥a th√†nh c√¥ng!");
            } catch (Exception ex) {
                showError("L·ªói", "L·ªói t·∫°o kh√≥a: " + ex.getMessage());
            }
        });
        generatePanel.add(generateButton);

        return generatePanel;
    }

    /**
     * T·∫°o panel cho t·ª´ng lo·∫°i kh√≥a ho·∫∑c d·ªØ li·ªáu v·ªõi c√°c n√∫t ch·ª©c nƒÉng
     */
    private JPanel createKeyPanel(String title, boolean isPrivate, JTextArea textAreaField) {
        JPanel panel = UIComponents.createTitledPanel(title);

        JTextArea textArea = UIComponents.createStyledTextArea(isPrivate ? "Consolas" : "Segoe UI", isPrivate ? 12 : 13);
        if (isPrivate) {
            privateKeyTextArea = textArea;
        } else {
            publicKeyTextArea = textArea;
        }

        JScrollPane scrollPane = UIComponents.createStyledScrollPane(textArea);
        panel.add(scrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = createButtonPanel(textArea, isPrivate ? "Kh√≥a ri√™ng t∆∞" : "Kh√≥a c√¥ng khai", isPrivate, false);
        panel.add(buttonPanel, BorderLayout.SOUTH);

        return panel;
    }

    /**
     * T·∫°o tab k√Ω v√† x√°c th·ª±c ch·ªØ k√Ω
     */
    private JPanel createSignVerifyTab() {
        JPanel mainPanel = createStyledPanel(new BorderLayout(20, 20));

        // Panel d·ªØ li·ªáu
        JPanel dataPanel = createTextAreaPanel("D·ªØ Li·ªáu C·∫ßn K√Ω/X√°c Th·ª±c", false, true);
        dataTextArea = (JTextArea) ((JScrollPane) dataPanel.getComponent(0)).getViewport().getView();

        // Panel ch·ªØ k√Ω
        JPanel signaturePanel = createTextAreaPanel("Ch·ªØ K√Ω S·ªë", false, false);
        signatureTextArea = (JTextArea) ((JScrollPane) signaturePanel.getComponent(0)).getViewport().getView();

        // Chia ƒë√¥i m√†n h√¨nh
        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, dataPanel, signaturePanel);
        splitPane.setDividerSize(8);
        splitPane.setResizeWeight(0.5);
        splitPane.setBorder(null);

        mainPanel.add(splitPane, BorderLayout.CENTER);

        // Panel c√°c thao t√°c
        JPanel operationsPanel = createOperationsPanel();
        mainPanel.add(operationsPanel, BorderLayout.SOUTH);

        return mainPanel;
    }

    /**
     * T·∫°o panel chung cho v√πng vƒÉn b·∫£n v·ªõi c√°c n√∫t ch·ª©c nƒÉng
     */
    private JPanel createTextAreaPanel(String title, boolean isPrivate, boolean isData) {
        JPanel panel = UIComponents.createTitledPanel(title);

        JTextArea textArea = UIComponents.createStyledTextArea(isPrivate ? "Consolas" : "Segoe UI", isPrivate ? 12 : 13);
        JScrollPane scrollPane = UIComponents.createStyledScrollPane(textArea);
        panel.add(scrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = createButtonPanel(textArea, isData ? "D·ªØ li·ªáu" : "Ch·ªØ k√Ω", isPrivate, isData);
        panel.add(buttonPanel, BorderLayout.SOUTH);

        return panel;
    }

    /**
     * T·∫°o panel ch·ª©a c√°c n√∫t ch·ª©c nƒÉng (T·∫£i, L∆∞u, X√≥a, Sao ch√©p)
     */
    private JPanel createButtonPanel(JTextArea textArea, String type, boolean isPrivate, boolean isData) {
        JPanel buttonPanel = createStyledPanel(new FlowLayout(FlowLayout.LEFT, 10, 10));

        // T·∫£i cho D·ªØ li·ªáu v√† c·∫£ Kh√≥a (ri√™ng t∆∞ + c√¥ng khai)
        if (type.equals("D·ªØ li·ªáu") || type.contains("Kh√≥a")) {
            JButton loadButton = UIComponents.createSmallButton("T·∫£i");
            loadButton.addActionListener(e -> {
                if (type.equals("D·ªØ li·ªáu")) {
                    FileHandler.loadDataFromFile(textArea, statusLabel, this);
                } else {
                    FileHandler.loadKeyFromFile(isPrivate, textArea, statusLabel, this);
                }
            });
            buttonPanel.add(loadButton);
        }

        // L∆∞u cho Kh√≥a (ri√™ng t∆∞ + c√¥ng khai)
        if (type.contains("Kh√≥a")) {
            JButton saveButton = UIComponents.createSmallButton("L∆∞u");
            saveButton.addActionListener(e -> FileHandler.saveKeyToFile(isPrivate, textArea, statusLabel, this));
            buttonPanel.add(saveButton);
        }


        if (!isData || isPrivate || (isData && !isPrivate)) {
            JButton clearButton = UIComponents.createSmallButton("X√≥a");
            clearButton.addActionListener(e -> clearContent(textArea, type));
            buttonPanel.add(clearButton);
        }

        JButton copyButton = UIComponents.createSmallButton("Sao Ch√©p");
        copyButton.addActionListener(e -> copyToClipboard(textArea));
        buttonPanel.add(copyButton);

        return buttonPanel;
    }

    /**
     * T·∫°o panel ch·ª©a c√°c n√∫t thao t√°c ch√≠nh (K√Ω, X√°c th·ª±c)
     */
    private JPanel createOperationsPanel() {
        JPanel panel = createStyledPanel(new FlowLayout(FlowLayout.CENTER, 20, 15));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));

        JButton signButton = UIComponents.createStyledButton("K√Ω D·ªØ Li·ªáu", new Color(16, 185, 129));
        JButton verifyButton = UIComponents.createStyledButton("X√°c Th·ª±c Ch·ªØ K√Ω", new Color(139, 92, 246));

        signButton.addActionListener(e -> signData());
        verifyButton.addActionListener(e -> verifySignature());

        panel.add(signButton);
        panel.add(verifyButton);

        return panel;
    }

    /**
     * T·∫°o panel v·ªõi c√°c thu·ªôc t√≠nh m·∫∑c ƒë·ªãnh
     */
    private JPanel createStyledPanel(LayoutManager layout) {
        JPanel panel = new JPanel(layout);
        panel.setBackground(Color.WHITE);
        if (layout instanceof BorderLayout) {
            panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        }
        return panel;
    }

    /**
     * Hi·ªÉn th·ªã h·ªôp tho·∫°i l·ªói
     */
    private void showError(String title, String message) {
        FileHandler.showError(this, statusLabel, title, message);
    }

    /**
     * Hi·ªÉn th·ªã h·ªôp tho·∫°i th√¥ng tin
     */
    private void showInfo(String title, String message) {
        FileHandler.showInfo(this, statusLabel, title, message);
    }

    /**
     * K√Ω d·ªØ li·ªáu b·∫±ng kh√≥a ri√™ng t∆∞
     */
    private void signData() {
        try {
            String data = dataTextArea.getText();
            if (data.isEmpty()) {
                showError("L·ªói", "Vui l√≤ng nh·∫≠p d·ªØ li·ªáu c·∫ßn k√Ω");
                return;
            }

            PrivateKey privateKey = KeyUtils.readPrivateKeyFromString(privateKeyTextArea.getText());
            toolContext.setPrivateKey(privateKey);

            String signature = toolContext.sign(data);
            signatureTextArea.setText(signature);
            showInfo("Th√†nh c√¥ng", "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c k√Ω th√†nh c√¥ng");
        } catch (Exception e) {
            showError("L·ªói K√Ω D·ªØ Li·ªáu", e.getMessage());
        }
    }

    /**
     * X√°c th·ª±c ch·ªØ k√Ω b·∫±ng kh√≥a c√¥ng khai
     */
    private void verifySignature() {
        try {
            String data = dataTextArea.getText();
            String signature = signatureTextArea.getText();

            if (data.isEmpty() || signature.isEmpty()) {
                showError("L·ªói", "C·∫ßn c√≥ c·∫£ d·ªØ li·ªáu v√† ch·ªØ k√Ω ƒë·ªÉ x√°c th·ª±c");
                return;
            }

            PublicKey publicKey = KeyUtils.readPublicKeyFromString(publicKeyTextArea.getText());
            toolContext.setPublicKey(publicKey);

            boolean isValid = toolContext.verify(data, signature);
            showInfo("K·∫øt Qu·∫£ X√°c Th·ª±c",
                    isValid ? "Ch·ªØ k√Ω h·ª£p l·ªá ‚úì" : "Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá ‚úó");
        } catch (Exception e) {
            showError("L·ªói X√°c Th·ª±c", e.getMessage());
        }
    }

    /**
     * X√≥a n·ªôi dung v√πng vƒÉn b·∫£n
     */
    private void clearContent(JTextArea textArea, String type) {
        textArea.setText("");
        statusLabel.setText("ƒê√£ x√≥a " + type.toLowerCase());
    }

    /**
     * Sao ch√©p n·ªôi dung v√†o clipboard
     */
    private void copyToClipboard(JTextArea textArea) {
        textArea.selectAll();
        textArea.copy();
        textArea.select(0, 0);
        statusLabel.setText("ƒê√£ sao ch√©p n·ªôi dung v√†o clipboard");
    }

    /**
     * Thi·∫øt l·∫≠p ch·ª©c nƒÉng k√©o th·∫£ file
     */
    private void setupDragAndDrop() {
        FileHandler.setupKeyDragAndDrop(privateKeyTextArea, true, statusLabel, this);
        FileHandler.setupKeyDragAndDrop(publicKeyTextArea, false, statusLabel, this);
        FileHandler.setupDataDragAndDrop(dataTextArea, statusLabel, this);
    }
}